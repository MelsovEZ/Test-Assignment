import './styles/svb-table.scss';

export default class SvbTable {
    constructor() {
        this.data = null;
        this.element = null;
        this.activeRow = null;

        this.render();
        this.initEventListeners();
    }

    render() {
        this.element = document.createElement('div');
        this.element.classList.add('svb-table-wrapper');

        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–∫–º–µ–Ω—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
        this.table = document.createElement('table');
        this.table.classList.add('svb-table');

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–±–µ—Ä—Ç–∫—É
        this.element.appendChild(this.table);
    }

    renderHeader() {
        const thead = document.createElement('thead');
        const tr = document.createElement('tr');

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
        const thEnum = document.createElement('th');

        thEnum.textContent = '‚Ññ';
        tr.appendChild(thEnum);

        const columns = this.data.columns;
        const settings = this.data.settings;

        columns.forEach((columnName) => {
            if (columnName === 'uuid') return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É uuid

            const th = document.createElement('th');

            th.textContent = settings[columnName].represent;
            th.dataset.name = settings[columnName].name;
            tr.appendChild(th);
        });

        thead.appendChild(tr);

        // –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thead, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingThead = this.table.querySelector('thead');

        if (existingThead) {
            this.table.replaceChild(thead, existingThead);
        } else {
            this.table.appendChild(thead);
        }
    }

    renderBody() {
        const tbody = document.createElement('tbody');

        this.data.rows.forEach((rowData, rowIndex) => {
            const tr = document.createElement('tr');
            const uuid = rowData[0];

            tr.dataset.uuid = uuid;

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
            const tdEnum = document.createElement('td');

            tdEnum.textContent = rowIndex + 1; // –°—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
            tr.appendChild(tdEnum);

            rowData.forEach((cellData, index) => {
                const columnName = this.data.columns[index];

                if (columnName === 'uuid') return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É uuid

                const td = document.createElement('td');

                td.dataset.name = columnName;

                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —è—á–µ–π–∫–µ –æ–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                if (typeof cellData === 'object' && cellData !== null && cellData.r !== undefined) {
                    td.textContent = cellData.r;
                } else {
                    td.textContent = cellData;
                }

                tr.appendChild(td);
            });

            tbody.appendChild(tr);
        });

        // –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π tbody, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingTbody = this.table.querySelector('tbody');

        if (existingTbody) {
            this.table.replaceChild(tbody, existingTbody);
        } else {
            this.table.appendChild(tbody);
        }
    }

    initEventListeners() {
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        this.table.addEventListener('mouseover', (event) => {
            const row = event.target.closest('tr');

            if (row && row.parentNode.tagName === 'TBODY') {
                row.classList.add('hover');
            }
        });

        this.table.addEventListener('mouseout', (event) => {
            const row = event.target.closest('tr');

            if (row && row.parentNode.tagName === 'TBODY') {
                row.classList.remove('hover');
            }
        });

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ
        this.table.addEventListener('click', (event) => {
            const row = event.target.closest('tr');

            if (row && row.parentNode.tagName === 'TBODY') {
                this.setActiveRow(row);
            }
        });
    }

    setActiveRow(row) {
        if (this.activeRow) {
            this.activeRow.classList.remove('active');
        }

        this.activeRow = row;
        this.activeRow.classList.add('active');
    }

    getActiveRow() {
        return this.activeRow;
    }

    loadRows(data) {
        this.data = data;

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        this.renderHeader();
        this.renderBody();
    }

    addRow(rowData) {
        const tbody = this.table.querySelector('tbody');
        const tr = document.createElement('tr');
        const uuid = rowData[0];

        tr.dataset.uuid = uuid;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
        const rowCount = tbody.children.length + 1; // –ü–æ–ª—á–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
        const tdEnum = document.createElement('td');

        tdEnum.textContent = rowCount;
        tr.appendChild(tdEnum);

        rowData.forEach((cellData, index) => {
            const columnName = this.data.columns[index];

            if (columnName === 'uuid') return;

            const td = document.createElement('td');

            td.dataset.name = columnName;

            if (typeof cellData === 'object' && cellData !== null && cellData.r !== undefined) {
                td.textContent = cellData.r;
            } else {
                td.textContent = cellData;
            }

            tr.appendChild(td);
        });

        tbody.appendChild(tr);
    }

    removeRow(uuid) {
        const tbody = this.table.querySelector('tbody');
        const row = tbody.querySelector(`tr[data-uuid="${uuid}"]`);

        if (row) {
            tbody.removeChild(row);
        }

        // –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        Array.from(tbody.children).forEach((row, index) => {
            row.firstChild.textContent = index + 1;
        });
    }

    setValue(uuid, columnName, value) {
        const tbody = this.table.querySelector('tbody');
        const row = tbody.querySelector(`tr[data-uuid="${uuid}"]`);

        if (row) {
            const td = Array.from(row.children).find(td => td.dataset.name === columnName);

            if (td) {
                td.textContent = value;
            }
        }
    }

    getValue(uuid, columnName) {
        const tbody = this.table.querySelector('tbody');
        const row = tbody.querySelector(`tr[data-uuid="${uuid}"]`);

        if (row) {
            const td = Array.from(row.children).find(td => td.dataset.name === columnName);

            if (td) {
                return td.textContent;
            }
        }

        return null;
    }

    renderHeader() {
        const thead = document.createElement('thead');
        const tr = document.createElement('tr');

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
        const thEnum = document.createElement('th');

        thEnum.textContent = '‚Ññ';
        tr.appendChild(thEnum);

        const columns = this.data.columns;
        const settings = this.data.settings;

        columns.forEach((columnName) => {
            if (columnName === 'uuid') return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É uuid

            const th = document.createElement('th');

            th.dataset.name = settings[columnName].name;

            // –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            const thText = document.createElement('span');

            thText.textContent = settings[columnName].represent;
            thText.classList.add('th-text');
            th.appendChild(thText);

            // –ò–∫–æ–Ω–∫–∞
            const thIcon = document.createElement('span');

            thIcon.classList.add('th-icon');
            thIcon.innerHTML = '‚öôÔ∏è'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∏–∫–æ–Ω–∫—É
            th.appendChild(thIcon);

            tr.appendChild(th);
        });

        thead.appendChild(tr);

        // –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thead, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingThead = this.table.querySelector('thead');

        if (existingThead) {
            this.table.replaceChild(thead, existingThead);
        } else {
            this.table.appendChild(thead);
        }
    }

    renderHeader() {
        const thead = document.createElement('thead');
        const tr = document.createElement('tr');

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
        const thEnum = document.createElement('th');

        thEnum.textContent = '‚Ññ';
        tr.appendChild(thEnum);

        const columns = this.data.columns;
        const settings = this.data.settings;

        columns.forEach((columnName) => {
            if (columnName === 'uuid') return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É uuid

            const th = document.createElement('th');

            th.dataset.name = settings[columnName].name;

            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            const headerContainer = document.createElement('div');

            headerContainer.classList.add('header-container');

            // –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            const thText = document.createElement('span');

            thText.textContent = settings[columnName].represent;
            thText.classList.add('th-text');
            headerContainer.appendChild(thText);

            // –ò–∫–æ–Ω–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            const lockIcon = document.createElement('span');

            lockIcon.classList.add('icon', 'icon-lock');
            lockIcon.innerHTML = 'üîí'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –∏–∫–æ–Ω–∫—É
            headerContainer.appendChild(lockIcon);

            // –ò–∫–æ–Ω–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            const sortIcon = document.createElement('span');

            sortIcon.classList.add('icon', 'icon-sort');
            sortIcon.innerHTML = 'üîõ'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –∏–∫–æ–Ω–∫—É
            headerContainer.appendChild(sortIcon);

            // –ò–∫–æ–Ω–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
            const filterIcon = document.createElement('span');

            filterIcon.classList.add('icon', 'icon-filter');
            filterIcon.innerHTML = '‚öôÔ∏è'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –∏–∫–æ–Ω–∫—É
            headerContainer.appendChild(filterIcon);

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            th.appendChild(headerContainer);
            tr.appendChild(th);
        });

        thead.appendChild(tr);

        // –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thead, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingThead = this.table.querySelector('thead');

        if (existingThead) {
            this.table.replaceChild(thead, existingThead);
        } else {
            this.table.appendChild(thead);
        }
    }

}
